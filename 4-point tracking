import cv2
import numpy as np
import pathlib
import time
import os

## Creating templates from first image of the building.avi

# Reading the video
video = cv2.VideoCapture('building.avi')
ret, frame = video.read()

count = 0

# Extracting frames of video as images
while ret:
    cv2.imwrite("%d.jpg" % count, frame)     # save frame as JPEG file      
    ret,frame = video.read()
    print('Read a new frame: ', ret)
    count += 1
    
img = cv2.imread('0.jpg') # First frame
print(img.shape) # Print image shape
#cv2.imshow("original", img)

# Four points that must be tracked((391,163),(448,114),(450,155),(520,137))
x = (391,448,450,520)
y = (163,114,155,137)
w = 15
# Indicating these four points
for i in range(0,4):
    cropped_image = img[ y[i]-w : y[i]+w, x[i]-w : x[i]+w ]
    img_copy = cropped_image.copy()
    # Save the cropped image
    cv2.imwrite("template_point_%d.jpg" % (i+1) , cropped_image)
    
    cv2.rectangle(img, ( x[i]-w, y[i]-w ), ( x[i]+w, y[i]+w ), (0, 0, 255), 2)    
    cv2.putText(img, f"{i+1}", 
    (x[i] - 10, y[i] + 10),
    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 
    2, lineType=cv2.LINE_AA)
    
cv2.imwrite("first frame with indicating points.jpg", img)

cv2.imshow("first frame with indicating points", img)

cv2.waitKey(0)
cv2.destroyAllWindows()






## Tracking those points using Template Matching

# Read the video input.
cap = cv2.VideoCapture('building.avi')

if (cap.isOpened() == False):
    print('Error while trying to read video. Please check path again')
    
# Frame per second of inpute video('building.avi')    
fps = cap.get(cv2.CAP_PROP_FPS)
print('frames per second = ' , fps)  

# Get the frame width and height
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))

for i in range(1,5):
    # define codec and create VideoWriter object 
    out = cv2.VideoWriter('building%d.avi' % i, cv2.VideoWriter_fourcc('M','J','P','G'), 30, 
                      (frame_width, frame_height))

    # Read the template in grayscale format.
    template = cv2.imread('template_point_%d.jpg' % i,0)
    w, h = template.shape[::-1]
    frame_count = 0 # To count total frames.
    total_fps = 0 # To get the final frames per second.


    cap = cv2.VideoCapture('building.avi')

    # Read until end of video.
    while(cap.isOpened()):
        # Capture each frame of the video.
        ret, frame = cap.read()
        if ret:
            image = frame.copy()
            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            start_time = time.time()
            # Apply template Matching.
            result = cv2.matchTemplate(image, template, cv2.TM_CCOEFF_NORMED)
            end_time = time.time()
            A = end_time - start_time

            # Get the current fps.
            if A != 0:
                fps = 1 / A
                # Add `fps` to `total_fps`.
                total_fps += fps
            
            # Increment frame count.
            frame_count += 1
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            # Top left x and y coordinates.
            x1, y1 = max_loc
            # Bottom right x and y coordinates.
            x2, y2 = (x1 + w, y1 + h)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.putText(frame, f"{fps:.1f} FPS", 
                        (15, 25),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 
                        2, lineType=cv2.LINE_AA)
            cv2.imshow('Result', frame)
        
            out.write(frame)
        
            # Press `q` to exit.
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        else:
            break
    
    # Release VideoCapture() object.
    cap.release()
    # Close all frames and video windows.
    cv2.destroyAllWindows()
